// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "application/core/model"

	mock "github.com/stretchr/testify/mock"

	time "time"

	tokenauth "github.com/rokwire/core-auth-library-go/v3/tokenauth"
)

// Admin is an autogenerated mock type for the Admin type
type Admin struct {
	mock.Mock
}

// CreateAlertContact provides a mock function with given fields: alertContact
func (_m *Admin) CreateAlertContact(alertContact model.AlertContact) (*model.AlertContact, error) {
	ret := _m.Called(alertContact)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertContact")
	}

	var r0 *model.AlertContact
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AlertContact) (*model.AlertContact, error)); ok {
		return rf(alertContact)
	}
	if rf, ok := ret.Get(0).(func(model.AlertContact) *model.AlertContact); ok {
		r0 = rf(alertContact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertContact)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AlertContact) error); ok {
		r1 = rf(alertContact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfig provides a mock function with given fields: config, claims
func (_m *Admin) CreateConfig(config model.Config, claims *tokenauth.Claims) (*model.Config, error) {
	ret := _m.Called(config, claims)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfig")
	}

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Config, *tokenauth.Claims) (*model.Config, error)); ok {
		return rf(config, claims)
	}
	if rf, ok := ret.Get(0).(func(model.Config, *tokenauth.Claims) *model.Config); ok {
		r0 = rf(config, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Config, *tokenauth.Claims) error); ok {
		r1 = rf(config, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSurvey provides a mock function with given fields: survey, externalIDs
func (_m *Admin) CreateSurvey(survey model.Survey, externalIDs map[string]string) (*model.Survey, error) {
	ret := _m.Called(survey, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) (*model.Survey, error)); ok {
		return rf(survey, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) *model.Survey); ok {
		r0 = rf(survey, externalIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Survey, map[string]string) error); ok {
		r1 = rf(survey, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlertContact provides a mock function with given fields: id, orgID, appID
func (_m *Admin) DeleteAlertContact(id string, orgID string, appID string) error {
	ret := _m.Called(id, orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertContact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, orgID, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfig provides a mock function with given fields: id, claims
func (_m *Admin) DeleteConfig(id string, claims *tokenauth.Claims) error {
	ret := _m.Called(id, claims)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *tokenauth.Claims) error); ok {
		r0 = rf(id, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSurvey provides a mock function with given fields: id, orgID, appID, userID, externalIDs
func (_m *Admin) DeleteSurvey(id string, orgID string, appID string, userID string, externalIDs map[string]string) error {
	ret := _m.Called(id, orgID, appID, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) error); ok {
		r0 = rf(id, orgID, appID, userID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlertContact provides a mock function with given fields: id, orgID, appID
func (_m *Admin) GetAlertContact(id string, orgID string, appID string) (*model.AlertContact, error) {
	ret := _m.Called(id, orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertContact")
	}

	var r0 *model.AlertContact
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.AlertContact, error)); ok {
		return rf(id, orgID, appID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.AlertContact); ok {
		r0 = rf(id, orgID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertContact)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, orgID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertContacts provides a mock function with given fields: orgID, appID
func (_m *Admin) GetAlertContacts(orgID string, appID string) ([]model.AlertContact, error) {
	ret := _m.Called(orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertContacts")
	}

	var r0 []model.AlertContact
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]model.AlertContact, error)); ok {
		return rf(orgID, appID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []model.AlertContact); ok {
		r0 = rf(orgID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AlertContact)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSurveyResponses provides a mock function with given fields: orgID, appID, surveyID, userID, externalIDs, startDate, endDate, limit, offset
func (_m *Admin) GetAllSurveyResponses(orgID string, appID string, surveyID string, userID string, externalIDs map[string]string, startDate *time.Time, endDate *time.Time, limit *int, offset *int) ([]model.SurveyResponse, error) {
	ret := _m.Called(orgID, appID, surveyID, userID, externalIDs, startDate, endDate, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSurveyResponses")
	}

	var r0 []model.SurveyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string, *time.Time, *time.Time, *int, *int) ([]model.SurveyResponse, error)); ok {
		return rf(orgID, appID, surveyID, userID, externalIDs, startDate, endDate, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string, *time.Time, *time.Time, *int, *int) []model.SurveyResponse); ok {
		r0 = rf(orgID, appID, surveyID, userID, externalIDs, startDate, endDate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SurveyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]string, *time.Time, *time.Time, *int, *int) error); ok {
		r1 = rf(orgID, appID, surveyID, userID, externalIDs, startDate, endDate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: id, claims
func (_m *Admin) GetConfig(id string, claims *tokenauth.Claims) (*model.Config, error) {
	ret := _m.Called(id, claims)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *tokenauth.Claims) (*model.Config, error)); ok {
		return rf(id, claims)
	}
	if rf, ok := ret.Get(0).(func(string, *tokenauth.Claims) *model.Config); ok {
		r0 = rf(id, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *tokenauth.Claims) error); ok {
		r1 = rf(id, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigs provides a mock function with given fields: configType, claims
func (_m *Admin) GetConfigs(configType *string, claims *tokenauth.Claims) ([]model.Config, error) {
	ret := _m.Called(configType, claims)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigs")
	}

	var r0 []model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *tokenauth.Claims) ([]model.Config, error)); ok {
		return rf(configType, claims)
	}
	if rf, ok := ret.Get(0).(func(*string, *tokenauth.Claims) []model.Config); ok {
		r0 = rf(configType, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *tokenauth.Claims) error); ok {
		r1 = rf(configType, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurvey provides a mock function with given fields: id, orgID, appID
func (_m *Admin) GetSurvey(id string, orgID string, appID string) (*model.Survey, error) {
	ret := _m.Called(id, orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Survey, error)); ok {
		return rf(id, orgID, appID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Survey); ok {
		r0 = rf(id, orgID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, orgID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveys provides a mock function with given fields: orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset
func (_m *Admin) GetSurveys(orgID string, appID string, creatorID *string, surveyIDs []string, surveyTypes []string, calendarEventID string, limit *int, offset *int) ([]model.Survey, error) {
	ret := _m.Called(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveys")
	}

	var r0 []model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) ([]model.Survey, error)); ok {
		return rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) []model.Survey); ok {
		r0 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, []string, []string, string, *int, *int) error); ok {
		r1 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlertContact provides a mock function with given fields: alertContact
func (_m *Admin) UpdateAlertContact(alertContact model.AlertContact) error {
	ret := _m.Called(alertContact)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertContact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AlertContact) error); ok {
		r0 = rf(alertContact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfig provides a mock function with given fields: config, claims
func (_m *Admin) UpdateConfig(config model.Config, claims *tokenauth.Claims) error {
	ret := _m.Called(config, claims)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config, *tokenauth.Claims) error); ok {
		r0 = rf(config, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSurvey provides a mock function with given fields: survey, userID, externalIDs
func (_m *Admin) UpdateSurvey(survey model.Survey, userID string, externalIDs map[string]string) error {
	ret := _m.Called(survey, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Survey, string, map[string]string) error); ok {
		r0 = rf(survey, userID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdmin creates a new instance of Admin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Admin {
	mock := &Admin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
