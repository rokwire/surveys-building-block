// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "application/core/model"

	mock "github.com/stretchr/testify/mock"
)

// Core is an autogenerated mock type for the Core type
type Core struct {
	mock.Mock
}

// LoadDeletedMemberships provides a mock function with given fields:
func (_m *Core) LoadDeletedMemberships() ([]model.DeletedUserData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadDeletedMemberships")
	}

	var r0 []model.DeletedUserData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.DeletedUserData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.DeletedUserData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeletedUserData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCoreUserAccountByCriteria provides a mock function with given fields: accountCriteria, appID, orgID
func (_m *Core) RetrieveCoreUserAccountByCriteria(accountCriteria map[string]interface{}, appID *string, orgID *string) ([]model.CoreAccount, error) {
	ret := _m.Called(accountCriteria, appID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCoreUserAccountByCriteria")
	}

	var r0 []model.CoreAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *string, *string) ([]model.CoreAccount, error)); ok {
		return rf(accountCriteria, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *string, *string) []model.CoreAccount); ok {
		r0 = rf(accountCriteria, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CoreAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, *string, *string) error); ok {
		r1 = rf(accountCriteria, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCore creates a new instance of Core. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Core {
	mock := &Core{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
