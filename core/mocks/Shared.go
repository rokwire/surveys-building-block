// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "application/core/model"

	mock "github.com/stretchr/testify/mock"
)

// Shared is an autogenerated mock type for the Shared type
type Shared struct {
	mock.Mock
}

// createSurvey provides a mock function with given fields: survey, externalIDs
func (_m *Shared) createSurvey(survey model.Survey, externalIDs map[string]string) (*model.Survey, error) {
	ret := _m.Called(survey, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for createSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) (*model.Survey, error)); ok {
		return rf(survey, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) *model.Survey); ok {
		r0 = rf(survey, externalIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Survey, map[string]string) error); ok {
		r1 = rf(survey, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// deleteSurvey provides a mock function with given fields: id, orgID, appID, userID, externalIDs, admin
func (_m *Shared) deleteSurvey(id string, orgID string, appID string, userID string, externalIDs map[string]string, admin bool) error {
	ret := _m.Called(id, orgID, appID, userID, externalIDs, admin)

	if len(ret) == 0 {
		panic("no return value specified for deleteSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string, bool) error); ok {
		r0 = rf(id, orgID, appID, userID, externalIDs, admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getSurvey provides a mock function with given fields: id, orgID, appID
func (_m *Shared) getSurvey(id string, orgID string, appID string) (*model.Survey, error) {
	ret := _m.Called(id, orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for getSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Survey, error)); ok {
		return rf(id, orgID, appID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Survey); ok {
		r0 = rf(id, orgID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, orgID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getSurveys provides a mock function with given fields: orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset
func (_m *Shared) getSurveys(orgID string, appID string, creatorID *string, surveyIDs []string, surveyTypes []string, calendarEventID string, limit *int, offset *int) ([]model.Survey, error) {
	ret := _m.Called(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for getSurveys")
	}

	var r0 []model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) ([]model.Survey, error)); ok {
		return rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) []model.Survey); ok {
		r0 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, []string, []string, string, *int, *int) error); ok {
		r1 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// hasAttendedEvent provides a mock function with given fields: orgID, appID, eventID, userID, externalIDs
func (_m *Shared) hasAttendedEvent(orgID string, appID string, eventID string, userID string, externalIDs map[string]string) (bool, error) {
	ret := _m.Called(orgID, appID, eventID, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for hasAttendedEvent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) (bool, error)); ok {
		return rf(orgID, appID, eventID, userID, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) bool); ok {
		r0 = rf(orgID, appID, eventID, userID, externalIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]string) error); ok {
		r1 = rf(orgID, appID, eventID, userID, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// isEventAdmin provides a mock function with given fields: orgID, appID, eventID, userID, externalIDs
func (_m *Shared) isEventAdmin(orgID string, appID string, eventID string, userID string, externalIDs map[string]string) (bool, error) {
	ret := _m.Called(orgID, appID, eventID, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for isEventAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) (bool, error)); ok {
		return rf(orgID, appID, eventID, userID, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) bool); ok {
		r0 = rf(orgID, appID, eventID, userID, externalIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]string) error); ok {
		r1 = rf(orgID, appID, eventID, userID, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateSurvey provides a mock function with given fields: survey, userID, externalIDs, admin
func (_m *Shared) updateSurvey(survey model.Survey, userID string, externalIDs map[string]string, admin bool) error {
	ret := _m.Called(survey, userID, externalIDs, admin)

	if len(ret) == 0 {
		panic("no return value specified for updateSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Survey, string, map[string]string, bool) error); ok {
		r0 = rf(survey, userID, externalIDs, admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewShared creates a new instance of Shared. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShared(t interface {
	mock.TestingT
	Cleanup(func())
}) *Shared {
	mock := &Shared{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
