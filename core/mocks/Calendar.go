// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	calendar "application/driven/calendar"

	mock "github.com/stretchr/testify/mock"
)

// Calendar is an autogenerated mock type for the Calendar type
type Calendar struct {
	mock.Mock
}

// GetEventUsers provides a mock function with given fields: orgID, appID, eventID, users, registered, role, attended
func (_m *Calendar) GetEventUsers(orgID string, appID string, eventID string, users []calendar.User, registered *bool, role string, attended *bool) ([]calendar.EventPerson, error) {
	ret := _m.Called(orgID, appID, eventID, users, registered, role, attended)

	if len(ret) == 0 {
		panic("no return value specified for GetEventUsers")
	}

	var r0 []calendar.EventPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, []calendar.User, *bool, string, *bool) ([]calendar.EventPerson, error)); ok {
		return rf(orgID, appID, eventID, users, registered, role, attended)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []calendar.User, *bool, string, *bool) []calendar.EventPerson); ok {
		r0 = rf(orgID, appID, eventID, users, registered, role, attended)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.EventPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []calendar.User, *bool, string, *bool) error); ok {
		r1 = rf(orgID, appID, eventID, users, registered, role, attended)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCalendar creates a new instance of Calendar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalendar(t interface {
	mock.TestingT
	Cleanup(func())
}) *Calendar {
	mock := &Calendar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
