// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "application/core/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateSurvey provides a mock function with given fields: survey, externalIDs
func (_m *Client) CreateSurvey(survey model.Survey, externalIDs map[string]string) (*model.Survey, error) {
	ret := _m.Called(survey, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) (*model.Survey, error)); ok {
		return rf(survey, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(model.Survey, map[string]string) *model.Survey); ok {
		r0 = rf(survey, externalIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Survey, map[string]string) error); ok {
		r1 = rf(survey, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSurveyAlert provides a mock function with given fields: surveyAlert
func (_m *Client) CreateSurveyAlert(surveyAlert model.SurveyAlert) error {
	ret := _m.Called(surveyAlert)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurveyAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SurveyAlert) error); ok {
		r0 = rf(surveyAlert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSurveyResponse provides a mock function with given fields: surveyResponse, externalIDs
func (_m *Client) CreateSurveyResponse(surveyResponse model.SurveyResponse, externalIDs map[string]string) (*model.SurveyResponse, error) {
	ret := _m.Called(surveyResponse, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurveyResponse")
	}

	var r0 *model.SurveyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SurveyResponse, map[string]string) (*model.SurveyResponse, error)); ok {
		return rf(surveyResponse, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(model.SurveyResponse, map[string]string) *model.SurveyResponse); ok {
		r0 = rf(surveyResponse, externalIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SurveyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.SurveyResponse, map[string]string) error); ok {
		r1 = rf(surveyResponse, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSurvey provides a mock function with given fields: id, orgID, appID, userID, externalIDs
func (_m *Client) DeleteSurvey(id string, orgID string, appID string, userID string, externalIDs map[string]string) error {
	ret := _m.Called(id, orgID, appID, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) error); ok {
		r0 = rf(id, orgID, appID, userID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSurveyResponse provides a mock function with given fields: id, orgID, appID, userID
func (_m *Client) DeleteSurveyResponse(id string, orgID string, appID string, userID string) error {
	ret := _m.Called(id, orgID, appID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSurveyResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(id, orgID, appID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSurveyResponses provides a mock function with given fields: orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate
func (_m *Client) DeleteSurveyResponses(orgID string, appID string, userID string, surveyIDs []string, surveyTypes []string, startDate *time.Time, endDate *time.Time) error {
	ret := _m.Called(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSurveyResponses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string, []string, *time.Time, *time.Time) error); ok {
		r0 = rf(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSurveyResponses provides a mock function with given fields: orgID, appID, userID, surveyID, startDate, endDate, limit, offset, externalIDs
func (_m *Client) GetAllSurveyResponses(orgID string, appID string, userID string, surveyID string, startDate *time.Time, endDate *time.Time, limit *int, offset *int, externalIDs map[string]string) ([]model.SurveyResponse, error) {
	ret := _m.Called(orgID, appID, userID, surveyID, startDate, endDate, limit, offset, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSurveyResponses")
	}

	var r0 []model.SurveyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *time.Time, *time.Time, *int, *int, map[string]string) ([]model.SurveyResponse, error)); ok {
		return rf(orgID, appID, userID, surveyID, startDate, endDate, limit, offset, externalIDs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, *time.Time, *time.Time, *int, *int, map[string]string) []model.SurveyResponse); ok {
		r0 = rf(orgID, appID, userID, surveyID, startDate, endDate, limit, offset, externalIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SurveyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, *time.Time, *time.Time, *int, *int, map[string]string) error); ok {
		r1 = rf(orgID, appID, userID, surveyID, startDate, endDate, limit, offset, externalIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurvey provides a mock function with given fields: id, orgID, appID
func (_m *Client) GetSurvey(id string, orgID string, appID string) (*model.Survey, error) {
	ret := _m.Called(id, orgID, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurvey")
	}

	var r0 *model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Survey, error)); ok {
		return rf(id, orgID, appID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Survey); ok {
		r0 = rf(id, orgID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, orgID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyResponse provides a mock function with given fields: id, orgID, appID, userID
func (_m *Client) GetSurveyResponse(id string, orgID string, appID string, userID string) (*model.SurveyResponse, error) {
	ret := _m.Called(id, orgID, appID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyResponse")
	}

	var r0 *model.SurveyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*model.SurveyResponse, error)); ok {
		return rf(id, orgID, appID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *model.SurveyResponse); ok {
		r0 = rf(id, orgID, appID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SurveyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(id, orgID, appID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveys provides a mock function with given fields: orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset
func (_m *Client) GetSurveys(orgID string, appID string, creatorID *string, surveyIDs []string, surveyTypes []string, calendarEventID string, limit *int, offset *int) ([]model.Survey, error) {
	ret := _m.Called(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveys")
	}

	var r0 []model.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) ([]model.Survey, error)); ok {
		return rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, []string, []string, string, *int, *int) []model.Survey); ok {
		r0 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, []string, []string, string, *int, *int) error); ok {
		r1 = rf(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSurveyResponses provides a mock function with given fields: orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset
func (_m *Client) GetUserSurveyResponses(orgID string, appID string, userID string, surveyIDs []string, surveyTypes []string, startDate *time.Time, endDate *time.Time, limit *int, offset *int) ([]model.SurveyResponse, error) {
	ret := _m.Called(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSurveyResponses")
	}

	var r0 []model.SurveyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string, []string, *time.Time, *time.Time, *int, *int) ([]model.SurveyResponse, error)); ok {
		return rf(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []string, []string, *time.Time, *time.Time, *int, *int) []model.SurveyResponse); ok {
		r0 = rf(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SurveyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []string, []string, *time.Time, *time.Time, *int, *int) error); ok {
		r1 = rf(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSurvey provides a mock function with given fields: survey, userID, externalIDs
func (_m *Client) UpdateSurvey(survey model.Survey, userID string, externalIDs map[string]string) error {
	ret := _m.Called(survey, userID, externalIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Survey, string, map[string]string) error); ok {
		r0 = rf(survey, userID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSurveyResponse provides a mock function with given fields: surveyResponse
func (_m *Client) UpdateSurveyResponse(surveyResponse model.SurveyResponse) error {
	ret := _m.Called(surveyResponse)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurveyResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SurveyResponse) error); ok {
		r0 = rf(surveyResponse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
