// Code generated by MockGen. DO NOT EDIT.

// Package interfaces is a generated GoMock package.
package interfaces

import (
	model "application/core/model"
	calendar "application/driven/calendar"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAlertContact mocks base method.
func (m *MockStorage) CreateAlertContact(alertContact model.AlertContact) (*model.AlertContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertContact", alertContact)
	ret0, _ := ret[0].(*model.AlertContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertContact indicates an expected call of CreateAlertContact.
func (mr *MockStorageMockRecorder) CreateAlertContact(alertContact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertContact", reflect.TypeOf((*MockStorage)(nil).CreateAlertContact), alertContact)
}

// CreateSurvey mocks base method.
func (m *MockStorage) CreateSurvey(survey model.Survey) (*model.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSurvey", survey)
	ret0, _ := ret[0].(*model.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSurvey indicates an expected call of CreateSurvey.
func (mr *MockStorageMockRecorder) CreateSurvey(survey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSurvey", reflect.TypeOf((*MockStorage)(nil).CreateSurvey), survey)
}

// CreateSurveyResponse mocks base method.
func (m *MockStorage) CreateSurveyResponse(surveyResponse model.SurveyResponse) (*model.SurveyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSurveyResponse", surveyResponse)
	ret0, _ := ret[0].(*model.SurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSurveyResponse indicates an expected call of CreateSurveyResponse.
func (mr *MockStorageMockRecorder) CreateSurveyResponse(surveyResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSurveyResponse", reflect.TypeOf((*MockStorage)(nil).CreateSurveyResponse), surveyResponse)
}

// DeleteAlertContact mocks base method.
func (m *MockStorage) DeleteAlertContact(id, orgID, appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertContact", id, orgID, appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertContact indicates an expected call of DeleteAlertContact.
func (mr *MockStorageMockRecorder) DeleteAlertContact(id, orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertContact", reflect.TypeOf((*MockStorage)(nil).DeleteAlertContact), id, orgID, appID)
}

// DeleteConfig mocks base method.
func (m *MockStorage) DeleteConfig(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockStorageMockRecorder) DeleteConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockStorage)(nil).DeleteConfig), id)
}

// DeleteSurvey mocks base method.
func (m *MockStorage) DeleteSurvey(id, orgID, appID, creatorID string, admin bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSurvey", id, orgID, appID, creatorID, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSurvey indicates an expected call of DeleteSurvey.
func (mr *MockStorageMockRecorder) DeleteSurvey(id, orgID, appID, creatorID, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSurvey", reflect.TypeOf((*MockStorage)(nil).DeleteSurvey), id, orgID, appID, creatorID, admin)
}

// DeleteSurveyResponse mocks base method.
func (m *MockStorage) DeleteSurveyResponse(id, orgID, appID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSurveyResponse", id, orgID, appID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSurveyResponse indicates an expected call of DeleteSurveyResponse.
func (mr *MockStorageMockRecorder) DeleteSurveyResponse(id, orgID, appID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSurveyResponse", reflect.TypeOf((*MockStorage)(nil).DeleteSurveyResponse), id, orgID, appID, userID)
}

// DeleteSurveyResponses mocks base method.
func (m *MockStorage) DeleteSurveyResponses(orgID, appID, userID string, surveyIDs, surveyTypes []string, startDate, endDate *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSurveyResponses", orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSurveyResponses indicates an expected call of DeleteSurveyResponses.
func (mr *MockStorageMockRecorder) DeleteSurveyResponses(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSurveyResponses", reflect.TypeOf((*MockStorage)(nil).DeleteSurveyResponses), orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate)
}

// DeleteSurveyResponsesWithIDs mocks base method.
func (m *MockStorage) DeleteSurveyResponsesWithIDs(appID, orgID string, accountsIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSurveyResponsesWithIDs", appID, orgID, accountsIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSurveyResponsesWithIDs indicates an expected call of DeleteSurveyResponsesWithIDs.
func (mr *MockStorageMockRecorder) DeleteSurveyResponsesWithIDs(appID, orgID, accountsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSurveyResponsesWithIDs", reflect.TypeOf((*MockStorage)(nil).DeleteSurveyResponsesWithIDs), appID, orgID, accountsIDs)
}

// DeleteSurveysWithIDs mocks base method.
func (m *MockStorage) DeleteSurveysWithIDs(appID, orgID string, accountsIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSurveysWithIDs", appID, orgID, accountsIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSurveysWithIDs indicates an expected call of DeleteSurveysWithIDs.
func (mr *MockStorageMockRecorder) DeleteSurveysWithIDs(appID, orgID, accountsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSurveysWithIDs", reflect.TypeOf((*MockStorage)(nil).DeleteSurveysWithIDs), appID, orgID, accountsIDs)
}

// FindConfig mocks base method.
func (m *MockStorage) FindConfig(configType, appID, orgID string) (*model.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConfig", configType, appID, orgID)
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConfig indicates an expected call of FindConfig.
func (mr *MockStorageMockRecorder) FindConfig(configType, appID, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConfig", reflect.TypeOf((*MockStorage)(nil).FindConfig), configType, appID, orgID)
}

// FindConfigByID mocks base method.
func (m *MockStorage) FindConfigByID(id string) (*model.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConfigByID", id)
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConfigByID indicates an expected call of FindConfigByID.
func (mr *MockStorageMockRecorder) FindConfigByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConfigByID", reflect.TypeOf((*MockStorage)(nil).FindConfigByID), id)
}

// FindConfigs mocks base method.
func (m *MockStorage) FindConfigs(configType *string) ([]model.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConfigs", configType)
	ret0, _ := ret[0].([]model.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConfigs indicates an expected call of FindConfigs.
func (mr *MockStorageMockRecorder) FindConfigs(configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConfigs", reflect.TypeOf((*MockStorage)(nil).FindConfigs), configType)
}

// GetAlertContact mocks base method.
func (m *MockStorage) GetAlertContact(id, orgID, appID string) (*model.AlertContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertContact", id, orgID, appID)
	ret0, _ := ret[0].(*model.AlertContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertContact indicates an expected call of GetAlertContact.
func (mr *MockStorageMockRecorder) GetAlertContact(id, orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertContact", reflect.TypeOf((*MockStorage)(nil).GetAlertContact), id, orgID, appID)
}

// GetAlertContacts mocks base method.
func (m *MockStorage) GetAlertContacts(orgID, appID string) ([]model.AlertContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertContacts", orgID, appID)
	ret0, _ := ret[0].([]model.AlertContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertContacts indicates an expected call of GetAlertContacts.
func (mr *MockStorageMockRecorder) GetAlertContacts(orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertContacts", reflect.TypeOf((*MockStorage)(nil).GetAlertContacts), orgID, appID)
}

// GetAlertContactsByKey mocks base method.
func (m *MockStorage) GetAlertContactsByKey(key, orgID, appID string) ([]model.AlertContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertContactsByKey", key, orgID, appID)
	ret0, _ := ret[0].([]model.AlertContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertContactsByKey indicates an expected call of GetAlertContactsByKey.
func (mr *MockStorageMockRecorder) GetAlertContactsByKey(key, orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertContactsByKey", reflect.TypeOf((*MockStorage)(nil).GetAlertContactsByKey), key, orgID, appID)
}

// GetSurvey mocks base method.
func (m *MockStorage) GetSurvey(id, orgID, appID string) (*model.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurvey", id, orgID, appID)
	ret0, _ := ret[0].(*model.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurvey indicates an expected call of GetSurvey.
func (mr *MockStorageMockRecorder) GetSurvey(id, orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurvey", reflect.TypeOf((*MockStorage)(nil).GetSurvey), id, orgID, appID)
}

// GetSurveyResponse mocks base method.
func (m *MockStorage) GetSurveyResponse(id, orgID, appID, userID string) (*model.SurveyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyResponse", id, orgID, appID, userID)
	ret0, _ := ret[0].(*model.SurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyResponse indicates an expected call of GetSurveyResponse.
func (mr *MockStorageMockRecorder) GetSurveyResponse(id, orgID, appID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyResponse", reflect.TypeOf((*MockStorage)(nil).GetSurveyResponse), id, orgID, appID, userID)
}

// GetSurveyResponses mocks base method.
func (m *MockStorage) GetSurveyResponses(orgID, appID, userID *string, surveyIDs, surveyTypes []string, startDate, endDate *time.Time, limit, offset *int) ([]model.SurveyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyResponses", orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)
	ret0, _ := ret[0].([]model.SurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyResponses indicates an expected call of GetSurveyResponses.
func (mr *MockStorageMockRecorder) GetSurveyResponses(orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyResponses", reflect.TypeOf((*MockStorage)(nil).GetSurveyResponses), orgID, appID, userID, surveyIDs, surveyTypes, startDate, endDate, limit, offset)
}

// GetSurveys mocks base method.
func (m *MockStorage) GetSurveys(orgID, appID string, creatorID *string, surveyIDs, surveyTypes []string, calendarEventID string, limit, offset *int) ([]model.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveys", orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
	ret0, _ := ret[0].([]model.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveys indicates an expected call of GetSurveys.
func (mr *MockStorageMockRecorder) GetSurveys(orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveys", reflect.TypeOf((*MockStorage)(nil).GetSurveys), orgID, appID, creatorID, surveyIDs, surveyTypes, calendarEventID, limit, offset)
}

// InsertConfig mocks base method.
func (m *MockStorage) InsertConfig(config model.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertConfig indicates an expected call of InsertConfig.
func (mr *MockStorageMockRecorder) InsertConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConfig", reflect.TypeOf((*MockStorage)(nil).InsertConfig), config)
}

// PerformTransaction mocks base method.
func (m *MockStorage) PerformTransaction(arg0 func(Storage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformTransaction indicates an expected call of PerformTransaction.
func (mr *MockStorageMockRecorder) PerformTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformTransaction", reflect.TypeOf((*MockStorage)(nil).PerformTransaction), arg0)
}

// RegisterStorageListener mocks base method.
func (m *MockStorage) RegisterStorageListener(listener StorageListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStorageListener", listener)
}

// RegisterStorageListener indicates an expected call of RegisterStorageListener.
func (mr *MockStorageMockRecorder) RegisterStorageListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorageListener", reflect.TypeOf((*MockStorage)(nil).RegisterStorageListener), listener)
}

// UpdateAlertContact mocks base method.
func (m *MockStorage) UpdateAlertContact(alertContact model.AlertContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertContact", alertContact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlertContact indicates an expected call of UpdateAlertContact.
func (mr *MockStorageMockRecorder) UpdateAlertContact(alertContact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertContact", reflect.TypeOf((*MockStorage)(nil).UpdateAlertContact), alertContact)
}

// UpdateConfig mocks base method.
func (m *MockStorage) UpdateConfig(config model.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockStorageMockRecorder) UpdateConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockStorage)(nil).UpdateConfig), config)
}

// UpdateSurvey mocks base method.
func (m *MockStorage) UpdateSurvey(survey model.Survey, admin bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSurvey", survey, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSurvey indicates an expected call of UpdateSurvey.
func (mr *MockStorageMockRecorder) UpdateSurvey(survey, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSurvey", reflect.TypeOf((*MockStorage)(nil).UpdateSurvey), survey, admin)
}

// UpdateSurveyResponse mocks base method.
func (m *MockStorage) UpdateSurveyResponse(surveyResponse model.SurveyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSurveyResponse", surveyResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSurveyResponse indicates an expected call of UpdateSurveyResponse.
func (mr *MockStorageMockRecorder) UpdateSurveyResponse(surveyResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSurveyResponse", reflect.TypeOf((*MockStorage)(nil).UpdateSurveyResponse), surveyResponse)
}

// MockStorageListener is a mock of StorageListener interface.
type MockStorageListener struct {
	ctrl     *gomock.Controller
	recorder *MockStorageListenerMockRecorder
}

// MockStorageListenerMockRecorder is the mock recorder for MockStorageListener.
type MockStorageListenerMockRecorder struct {
	mock *MockStorageListener
}

// NewMockStorageListener creates a new mock instance.
func NewMockStorageListener(ctrl *gomock.Controller) *MockStorageListener {
	mock := &MockStorageListener{ctrl: ctrl}
	mock.recorder = &MockStorageListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageListener) EXPECT() *MockStorageListenerMockRecorder {
	return m.recorder
}

// OnConfigsUpdated mocks base method.
func (m *MockStorageListener) OnConfigsUpdated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigsUpdated")
}

// OnConfigsUpdated indicates an expected call of OnConfigsUpdated.
func (mr *MockStorageListenerMockRecorder) OnConfigsUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigsUpdated", reflect.TypeOf((*MockStorageListener)(nil).OnConfigsUpdated))
}

// OnExamplesUpdated mocks base method.
func (m *MockStorageListener) OnExamplesUpdated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnExamplesUpdated")
}

// OnExamplesUpdated indicates an expected call of OnExamplesUpdated.
func (mr *MockStorageListenerMockRecorder) OnExamplesUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExamplesUpdated", reflect.TypeOf((*MockStorageListener)(nil).OnExamplesUpdated))
}

// MockNotifications is a mock of Notifications interface.
type MockNotifications struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsMockRecorder
}

// MockNotificationsMockRecorder is the mock recorder for MockNotifications.
type MockNotificationsMockRecorder struct {
	mock *MockNotifications
}

// NewMockNotifications creates a new mock instance.
func NewMockNotifications(ctrl *gomock.Controller) *MockNotifications {
	mock := &MockNotifications{ctrl: ctrl}
	mock.recorder = &MockNotificationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifications) EXPECT() *MockNotificationsMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockNotifications) SendMail(toEmail, subject, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMail", toEmail, subject, body)
}

// SendMail indicates an expected call of SendMail.
func (mr *MockNotificationsMockRecorder) SendMail(toEmail, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockNotifications)(nil).SendMail), toEmail, subject, body)
}

// SendNotification mocks base method.
func (m *MockNotifications) SendNotification(notification model.NotificationMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotification", notification)
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationsMockRecorder) SendNotification(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotifications)(nil).SendNotification), notification)
}

// MockCalendar is a mock of Calendar interface.
type MockCalendar struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarMockRecorder
}

// MockCalendarMockRecorder is the mock recorder for MockCalendar.
type MockCalendarMockRecorder struct {
	mock *MockCalendar
}

// NewMockCalendar creates a new mock instance.
func NewMockCalendar(ctrl *gomock.Controller) *MockCalendar {
	mock := &MockCalendar{ctrl: ctrl}
	mock.recorder = &MockCalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendar) EXPECT() *MockCalendarMockRecorder {
	return m.recorder
}

// GetEventUsers mocks base method.
func (m *MockCalendar) GetEventUsers(orgID, appID, eventID string, users []calendar.User, registered *bool, role string, attended *bool) ([]calendar.EventPerson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventUsers", orgID, appID, eventID, users, registered, role, attended)
	ret0, _ := ret[0].([]calendar.EventPerson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventUsers indicates an expected call of GetEventUsers.
func (mr *MockCalendarMockRecorder) GetEventUsers(orgID, appID, eventID, users, registered, role, attended interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventUsers", reflect.TypeOf((*MockCalendar)(nil).GetEventUsers), orgID, appID, eventID, users, registered, role, attended)
}
